import deepMerge from 'deepmerge';
import hoistNonReactStatics from 'hoist-non-react-statics';
import React, { ComponentType, Ref } from 'react';
import injectSheet from 'react-jss';
import { createGenerateClassName } from './createGenerateClassName';

const generateClassName = createGenerateClassName();

const getStyle = (style) => (...args) => (typeof style === 'function' ? style(...args) : style);

const mergeStyles = (styles, ...newStyles) => {
  return (...args) =>
    deepMerge.all([getStyle(styles)(...args), ...newStyles.map((newStyle) => getStyle(newStyle)(...args))]);
};

const getDisplayName = (Component) => Component.displayName || Component.name || 'Component';
const wrapComponentName = (componentName) => `WithStyles(${componentName})`;

export interface WithStylesPropTypes {
  innerComponentRef: Ref<any>;
}

export const withStyles = (styles) => (Component: ComponentType<any>) => {
  class WithStyles extends React.Component<WithStylesPropTypes> {
    static defaultProps = Component.defaultProps;
    static InnerComponent = Component;
    static displayName = wrapComponentName(getDisplayName(Component));
    static withCustomStyles = (...newStyles) => {
      return withStyles(mergeStyles(styles, ...newStyles))(Component);
    };

    state = {
      error: false
    };

    componentDidUpdate(prevProps) {
      if (prevProps !== this.props) {
        // retry rendering of Component
        this.setState({ error: false });
      }
    }

    componentDidCatch(error, info) {
      // Logger.error(error.message, Component.displayName || WithStyles.displayName);
      this.setState({ error: true });
    }

    render() {
      const { innerComponentRef, ...rest } = this.props;
      const { error } = this.state;

      // props containing theme, classes generated by react-jss as well as
      // user defined props
      if (!error) {
        return <Component ref={innerComponentRef} {...rest} />;
      } else {
        return null;
      }
    }
  }

  hoistNonReactStatics(WithStyles, Component);
  return injectSheet(styles, {
    generateClassName
  })(WithStyles);
};
